{"version":3,"sources":["../src/js/ViewConnections.js"],"names":["$","radius","displacement","d3","courses","data","arrows","catalog","instance","Connector","DragOptions","cursor","zIndex","PaintStyle","stroke","strokeWidth","availableCourses","graphCourses","revert","accept","drop","x","ui","top","e","left","position","courseStack","visited","returned","dfs","v","child","prereqDict","adjList","returnedToAdjList","course","prereqs","prereq","adj","makeConnections","findCourse","description","name","title","sourceTarget","source","target","initializeConnections","jsPlumb","connections","entry","endpoint","anchors","shape","anchorCount","ID","object"],"mappings":"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","sourcesContent":["$(document).ready(function () {\n\n    //GLOBAL VARIABLES\n    const radius = 20;\n    const displacement = radius + 10;\n\n    var courses, arrows, catalog;\n    //IMPORT DATA\n    d3.json(\"../Model/ViewModel_Test.json\").then(function (data) {\n        courses = data.Classes;\n        arrows = data.Connections;\n    });\n    d3.json(\"../Model/CS_major.json\").then(function (data) {\n        catalog = data;\n    });\n\n    //SET UP JSPLUMB. instance will be the variable which controls jsPlumb draggable behavior.\n    var instance = jsPlumb.getInstance({\n        Connector: [\"Straight\"],\n        DragOptions: {cursor: \"pointer\", zIndex: 5},\n        PaintStyle: {stroke: \"black\", strokeWidth: 2},\n    });\n\n    /*Make courses draggable. Notice that the courses inside the top bar and the ones\n      in the graph have different programs controlling their drag behavior. This is\n      necessary for drag-and-drop to work with line drawing.\n     */\n    var availableCourses = $(\".draggable.available\");\n    var graphCourses = $(\".inGraph\");\n\n    availableCourses.draggable({revert: true});\n    instance.draggable(graphCourses);\n\n    //DECLARE DRAGGABLE BEHAVIOR\n    $(\"#svgNotTaken\").droppable({accept: '.draggable'});\n    $(\"#graph\").droppable({\n        drop: function (e, ui) {\n            var x = ui.helper.clone();\n            ui.helper.remove();\n            x.css({\n                top: e.clientY - displacement,\n                left: e.clientX - displacement,\n                position: 'absolute'\n            });\n            x.addClass(\"inGraph\");\n            $(\"#graph\").append(x);\n\n            var courseStack = [];\n            var visited = [];\n            var returned = [];\n\n            let dfs = function (draggedCourse) {\n                courseStack.push(draggedCourse);\n                visited.push(draggedCourse);\n\n                while (courseStack.length !== 0) {\n                    var v = courseStack.pop();\n                    returned.push(v);\n                    for (var child of prereqDict.get(v)) {\n                        if (!(child in visited)) {\n                            dfs(child);\n                        }\n                    }\n                }\n            };\n\n            var adjList = [];\n\n//connections to adjacency list\n            let returnedToAdjList = function () {\n                for (var course of returned) {\n                    var prereqs = prereqDict.get(course);\n                    for (var prereq of prereqs) {\n                        if (!adjList.some((adj) => adj.source === prereq && adj.target === course)) {\n                            adjList.push({\n                                \"source\": prereq,\n                                \"target\": course\n                            });\n                        }\n                    }\n                }\n                returned = [];\n            };\n\n            let makeConnections = function (draggedCourse) {\n                var courseStack = [];\n                var visited = [];\n                var returned = [];\n\n                dfs(draggedCourse);\n                returnedToAdjList();\n            };\n\n\n            //JULIET'S ALGORITHM HERE\n            /*\n            Pseudocode\n\n            let prereqs = array of courses returned by prereq algorithm\n            for prereq in prereqs:\n                if prereq on graph already:\n                    draw line from that prereq to dropped node (x)\n                else:\n                    add node, in transparent red. Think about how you want to place it.\n                    draw connection between that node and this node.\n                    something about updating profiles.\n\n            */\n\n            availableCourses = $(\".draggable.available\");\n            graphCourses = $(\".inGraph\");\n\n            availableCourses.draggable({revert: true});\n            instance.draggable(graphCourses);\n        }\n    });\n\n    $(\".draggable\").bind(\"mousedown\", function () {\n        var course = findCourse(catalog, this);\n        var description = course.courseInfo;\n        var name = course.name;\n        var title = course.dept + course.courseNum;\n        $(\"#name\").replaceWith(\"<p id='name'>\" + title + \"<br>\" + name + \"</p>\");\n        $(\"#courseDescription\").replaceWith(\"<p id='courseDescription'>\" + description + \"</p>\");\n    });\n\n    let sourceTarget = [\n        {\n            source: \"COMP123\",\n            target: \"COMP127\"\n        },\n        {\n            source: \"COMP127\",\n            target: \"COMP128\"\n        },\n        {\n            source: \"COMP128\",\n            target: \"COMP221\"\n        },\n        {\n            source: \"MATH279\",\n            target: \"COMP221\"\n        },\n        {\n            source: \"COMP128\",\n            target: \"COMP240\"\n        }\n    ];\n\n    initializeConnections(sourceTarget);\n    jsPlumb.fire(\"jsPlumbDemoLoaded\", instance);\n\n\n    //-----------     HELPER FUNCTIONS     -----------\n\n    //Draw the connections between imported courses.\n    function initializeConnections(connections) {\n        connections.forEach((function (entry) {\n            instance.connect({\n                source: entry.source,\n                target: entry.target,\n                endpoint: \"Blank\",\n                anchors: [\n                    [\"Perimeter\", {shape: \"Diamond\", anchorCount: 150}],\n                    [\"Perimeter\", {shape: \"Diamond\", anchorCount: 150}]\n                ]\n            })\n        }));\n    }\n\n    function findCourse(data, course) {\n        let ID = course.id;\n        for (let object of data) {\n            if ((object.dept + object.courseNum) === ID) {\n                return object;\n            }\n        }\n    }\n});\n"],"file":"ViewConnections.js"}